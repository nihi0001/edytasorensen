---
import Anmeldelser from "../../components/Anmeldelser.astro";
import Instagram from "../../components/Instagram.astro";
import Service from "../../components/Service.astro";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const data = await fetch(
    "https://nizfrlmeuslmzbvoilai.supabase.co/rest/v1/edytasorensen_data",
    {
      method: "GET",
      headers: {
        apikey:
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pemZybG1ldXNsbXpidm9pbGFpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzMxNzM2MDAsImV4cCI6MjA0ODc0OTYwMH0.RQ3OCApyz7TpKmzgRC189LxU9mOzQLPHTIxEIIeFO2Y",
      },
    }
  ).then((response) => response.json());

  return data.map((kategori) => {
    return {
      params: { slug: kategori.slug },
      props: { myData: kategori },
    };
  });
}

const { myData } = Astro.props;
console.log(myData);
---

<Layout title={myData.name}>
  <div class="max-w-3xl mt-8 px-4 sm:px-6 md:px-8 lg:px-12">
    <h2 class="text-4xl font-playfair uppercase font-medium mb-8">
      {myData.name}
    </h2>
    <p class="max-w-lg text-sm font-oxygen font-light mb-16 leading-6">
      {myData.information}
    </p>
  </div>

  <div>
    <!-- swipe galleri her -->

    <div class="relative mb-16">
      <!-- Billeder Wrapper -->
      <div class="overflow-hidden">
        <div
          id="galleryImages"
          class="flex transition-transform duration-300 ease-in-out"
        >
          <!-- Billederne -->
           <!-- overvej om det kun skal være 1/3 -->
          <div class="w-1/2 sm:w-1/3 flex-shrink-0">
            <img
              src={`/images/${myData.imggallery1}`}
              alt={myData.slug}
              class="w-full h-auto object-cover"
            />
          </div>
          <div class="w-1/2 sm:w-1/3 flex-shrink-0">
            <img
              src={`/images/${myData.imggallery2}`}
              alt={myData.slug}
              class="w-full h-auto object-cover"
            />
          </div>
          <div class="w-1/2 sm:w-1/3 flex-shrink-0">
            <img
              src={`/images/${myData.imggallery3}`}
              alt={myData.slug}
              class="w-full h-auto object-cover"
            />
          </div>
          <div class="w-1/2 sm:w-1/3 flex-shrink-0">
            <img
              src={`/images/${myData.imggallery4}`}
              alt={myData.slug}
              class="w-full h-auto object-cover"
            />
          </div>
          <div class="w-1/2 sm:w-1/3 flex-shrink-0">
            <img
              src={`/images/${myData.imggallery5}`}
              alt={myData.slug}
              class="w-full h-auto object-cover"
            />
          </div>
          <div class="w-1/2 sm:w-1/3 flex-shrink-0">
            <img
              src={`/images/${myData.imggallery6}`}
              alt={myData.slug}
              class="w-full h-auto object-cover"
            />
          </div>
        </div>
      </div>
    
      <!-- Navigation (piler) -->
      <button
        id="prevBtn"
        class="absolute top-1/2 left-4 transform -translate-y-1/2  p-2 "
      >
        <img src="/images/pilgallerileft.svg" alt="Previous" class="w-8 h-8" />
      </button>
      <button
        id="nextBtn"
        class="absolute top-1/2 right-4 transform -translate-y-1/2 p-2 "
      >
        <img src="/images/pilgalleri.svg" alt="Next" class="w-8 h-8" />
      </button>
    </div>
    
    

  <!-- story telling -->

  <div class="max-w-3xl mt-8 px-4 sm:px-6 md:px-8 lg:px-12 mb-16">
  <p class="max-w-lg text-sm font-oxygen font-light leading-6">{myData.storytelling}</p>
</div>

  <div class="py-8">
    <!-- Grid Container med 2 kolonner -->
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-1"> <!-- evt slet grid col 1 -->
      <!-- Billede 1 -->
      <div>
        <img
          src=`/images/${myData.imggrid1}`
          alt={myData.slug}
          class="w-full h-auto object-cover"
        />
      </div>
      <!-- Billede 2 -->
      <div>
        <img
          src=`/images/${myData.imggrid2}`
          alt={myData.slug}
          class="w-full h-auto object-cover"
        />
      </div>
      <!-- Billede 3 -->
      <div>
        <img
          src=`/images/${myData.imggrid3}`
          alt={myData.slug}
          class="w-full h-auto object-cover"
        />
      </div>
      <!-- Billede 4 -->
      <div>
        <img
          src=`/images/${myData.imggrid4}`
          alt={myData.slug}
          class="w-full h-auto object-cover"
        />
      </div>
    </div>
  </div>

  <!--<Service/> -->
  <Anmeldelser/>
  <Instagram/>
</Layout>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const gallery = document.getElementById("galleryImages");
  const images = gallery.children; // Alle billeder
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");
  const imagesPerView = 3; // der vises 3 billeder
  const totalImages = images.length; // billeder i alt
  let currentIndex = imagesPerView; // Start på første billede

  // loop - så efter billede 6 vises billede 1
  const firstClones = []; // opretter array firstClone
  const lastClones = []; // opretter array lastClone
  for (let i = 0; i < imagesPerView; i++) {
    firstClones.push(images[i].cloneNode(true)); // Første billeder
    lastClones.push(images[totalImages - i - 1].cloneNode(true)); // Sidste billeder
  }

  // Tilføj klonede billeder i starten og slutningen
  lastClones.reverse().forEach((clone) => gallery.prepend(clone)); // Sidste billeder forrest
  firstClones.forEach((clone) => gallery.append(clone)); // Første billeder bagerst

  // Juster galleriet, så vi starter på det "rigtige" første billede
  gallery.style.transform = `translateX(-${(currentIndex * 100) / imagesPerView}%)`; // formel der regner ud hvor langt galleriet skal rulle, for at vise næste billede

  // Opdater galleriet
  const updateGallery = () => {
    const offset = -(currentIndex * 100) / imagesPerView;
    gallery.style.transition = "transform 0.3s ease-in-out"; // glidende animation
    gallery.style.transform = `translateX(${offset}%)`;
  };

  // Håndterer looping-effekt
  const handleLoop = () => {
    if (currentIndex === 0) {
      currentIndex = totalImages; // Gå til sidste sæt billeder
      gallery.style.transition = "none"; // Fjern animation
      gallery.style.transform = `translateX(-${(currentIndex * 100) / imagesPerView}%)`;
    }
    if (currentIndex === totalImages + imagesPerView) {
      currentIndex = imagesPerView; // Gå til første sæt billeder
      gallery.style.transition = "none"; // Fjern animation
      gallery.style.transform = `translateX(-${(currentIndex * 100) / imagesPerView}%)`;
    }
  };

  // Næste billeder
  nextBtn.addEventListener("click", () => {
    if (currentIndex < totalImages + imagesPerView) {
      currentIndex++;
      updateGallery();
      setTimeout(handleLoop, 300); // Vent på animation før looping
    }
  });

  // Forrige billeder
  prevBtn.addEventListener("click", () => {
    if (currentIndex > 0) {
      currentIndex--;
      updateGallery();
      setTimeout(handleLoop, 300); // Vent på animation før looping
    }
  });
});



</script>